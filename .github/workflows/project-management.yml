name: Weekly Project Management
description: Weekly archival and project health monitoring

on:
  schedule:
    # Run every Sunday at 00:00 UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  weekly-maintenance:
    name: 📊 Weekly Maintenance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Archive Closed Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            const sixMonthsAgo = new Date();
            sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
            
            // Get closed issues from the past week
            const { data: closedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              since: oneWeekAgo.toISOString(),
              per_page: 100
            });
            
            // Get old open issues (6+ months)
            const { data: oldIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const staleIssues = oldIssues.filter(issue => {
              const createdDate = new Date(issue.created_at);
              return createdDate < sixMonthsAgo;
            });
            
            console.log(`📊 Weekly Summary:`);
            console.log(`- Issues closed this week: ${closedIssues.length}`);
            console.log(`- Issues older than 6 months: ${staleIssues.length}`);
            
            // Mark very old issues as stale
            for (const issue of staleIssues) {
              const hasStaleLabel = issue.labels.some(label => label.name === 'stale');
              if (!hasStaleLabel) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['stale']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `⏰ **Stale Issue Notice**
                  
This issue has been open for over 6 months without recent activity. 

**Options:**
- If still relevant, please add a comment to remove the stale label
- If no longer needed, this issue may be closed in the future
- Add "keep-open" label to prevent automatic staling

*This is an automated weekly maintenance action.*`
                });
                
                console.log(`Marked issue #${issue.number} as stale`);
              }
            }

      - name: 📈 Generate Project Health Report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: allIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            const { data: openIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const { data: closedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              per_page: 100
            });
            
            // Count by type
            const bugCount = openIssues.filter(i => i.labels.some(l => l.name === 'bug')).length;
            const enhancementCount = openIssues.filter(i => i.labels.some(l => l.name === 'enhancement')).length;
            const featureCount = openIssues.filter(i => i.labels.some(l => l.name === 'feature-request')).length;
            const questionCount = openIssues.filter(i => i.labels.some(l => l.name === 'question')).length;
            
            // Count by priority
            const p0Count = openIssues.filter(i => i.labels.some(l => l.name === 'p0')).length;
            const p1Count = openIssues.filter(i => i.labels.some(l => l.name === 'p1')).length;
            const p2Count = openIssues.filter(i => i.labels.some(l => l.name === 'p2')).length;
            
            const report = `# 📊 Weekly Project Health Report
            
## 📈 Overall Statistics
- **Total Issues:** ${allIssues.length}
- **Open Issues:** ${openIssues.length}
- **Closed Issues:** ${closedIssues.length}
- **Resolution Rate:** ${((closedIssues.length / allIssues.length) * 100).toFixed(1)}%

## 📋 Issue Breakdown
| Type | Count |
|------|-------|
| 🐛 Bugs | ${bugCount} |
| 🔧 Enhancements | ${enhancementCount} |
| ✨ Features | ${featureCount} |
| ❓ Questions | ${questionCount} |

## ⚡ Priority Distribution
| Priority | Count | Description |
|----------|-------|-------------|
| P0 | ${p0Count} | Critical |
| P1 | ${p1Count} | High |
| P2 | ${p2Count} | Medium |

Generated: ${new Date().toISOString().split('T')[0]}`;
            
            console.log(report);
            
            // Add to job summary
            core.summary.addRaw(report).write();