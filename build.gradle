plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	
	// Required for Fabric Loom plugin
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	
	// Required for Spring AI dependencies
    mavenCentral()
}

loom {
	splitEnvironmentSourceSets()

    mods {
        "ausuka-ai-mod" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


    // Align Spring AI versions
    implementation platform("org.springframework.ai:spring-ai-bom:1.0.1")

    // 1) ChatClient 抽象（这里面才有 org.springframework.ai.chat.client.ChatClient）
    implementation("org.springframework.ai:spring-ai-client-chat") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }

    // 2) DeepSeek 模型实现
    implementation("org.springframework.ai:spring-ai-deepseek") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    implementation("org.springframework.ai:spring-ai-openai") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    implementation("org.springframework.ai:spring-ai-anthropic") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }

    // 3) Spring AI 基础模块（显式引入以避免运行时缺类）
    implementation("org.springframework.ai:spring-ai-model")
    implementation("org.springframework.ai:spring-ai-commons")
    implementation("org.springframework.ai:spring-ai-retry")
    // Spring Retry (required by spring-ai-retry & DeepSeekApi builder)
    implementation("org.springframework.retry:spring-retry:2.0.6")
    implementation "org.springframework.ai:spring-ai-template-st:1.0.1"


    // Spring Framework 运行时（与 Spring AI 1.0.1 匹配的 6.2.x）
    implementation("org.springframework:spring-core:6.2.7")
    implementation("org.springframework:spring-beans:6.2.7")
    implementation("org.springframework:spring-context:6.2.7")
    implementation("org.springframework:spring-aop:6.2.7")
    implementation("org.springframework:spring-expression:6.2.7")
    implementation("org.springframework:spring-messaging:6.2.7")
    implementation("org.springframework:spring-web:6.2.7")
    implementation("org.springframework:spring-webflux:6.2.7")
    implementation("org.springframework:spring-context-support:6.2.7")

    // （可选）流式需要 Reactor
    implementation "io.projectreactor:reactor-core:3.7.6"
    implementation "org.reactivestreams:reactive-streams:1.0.4"


    // 嵌入式数据库支持 (H2)
    implementation "com.h2database:h2:2.2.224"

	// MyBatis 持久层
	implementation "org.mybatis:mybatis:3.5.15"

    // 将 MyBatis 打包进 mod
    include("org.mybatis:mybatis:3.5.15")

    // Force modern Jackson (Spring 6.2 expects >= 2.17)
    implementation platform("com.fasterxml.jackson:jackson-bom:2.19.0")
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation "com.fasterxml:classmate:1.6.0"
    implementation "org.springframework:spring-jcl:6.2.7"


    // Fabric 打包：把这些依赖打进 mod（Jar-in-Jar）
    include("org.springframework.ai:spring-ai-client-chat:1.0.1") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    include("org.springframework.ai:spring-ai-deepseek:1.0.1") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    include("org.springframework.ai:spring-ai-openai:1.0.1"){
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    include("org.springframework.ai:spring-ai-anthropic:1.0.1") {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    include("org.springframework.ai:spring-ai-model:1.0.1")
    include("org.springframework.ai:spring-ai-commons:1.0.1")
    include("org.springframework.ai:spring-ai-retry:1.0.1")

    // Spring Framework runtime
    include("org.springframework:spring-core:6.2.7")
    include("org.springframework:spring-beans:6.2.7")
    include("org.springframework:spring-context:6.2.7")
    include("org.springframework:spring-aop:6.2.7")
    include("org.springframework:spring-expression:6.2.7")
    include("org.springframework:spring-messaging:6.2.7")
    include("org.springframework:spring-web:6.2.7")
    include("org.springframework:spring-webflux:6.2.7")
    include("org.springframework:spring-context-support:6.2.7")

    include("org.springframework.retry:spring-retry:2.0.6")
    include("org.springframework.ai:spring-ai-template-st:1.0.1")

    // Reactor and Micrometer
    include("io.projectreactor:reactor-core:3.7.6")
    include("org.reactivestreams:reactive-streams:1.0.4")
    include("io.micrometer:micrometer-core:1.15.0")
    include("io.micrometer:micrometer-commons:1.15.0")
    include("io.micrometer:micrometer-observation:1.15.0")
    include("io.micrometer:context-propagation:1.1.3")

    // Tools/Schema generation used by ChatClient tools
    include("com.knuddels:jtokkit:1.1.0")
    include("org.antlr:antlr4-runtime:4.13.1")
    include("org.antlr:ST4:4.3.4")
    include("org.antlr:antlr-runtime:3.5.3")
    include("io.swagger.core.v3:swagger-annotations-jakarta:2.2.25")
    include("com.github.victools:jsonschema-generator:4.37.0")
    include("com.github.victools:jsonschema-module-jackson:4.37.0")
    include("com.github.victools:jsonschema-module-swagger-2:4.37.0")

    include("com.h2database:h2:2.2.224")

    // Include Jackson in the mod to override older runtime versions
    include("com.fasterxml.jackson.core:jackson-core:2.19.0")
    include("com.fasterxml.jackson.core:jackson-annotations:2.19.0")
    include("com.fasterxml.jackson.core:jackson-databind:2.19.0")
    include("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0")
    include("com.fasterxml:classmate:1.6.0")
    include       "org.springframework:spring-jcl:6.2.7"


}

// Test dependencies
dependencies {
    testImplementation(platform("org.junit:junit-bom:5.10.3"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.mockito:mockito-core:5.12.0")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// 全局排除 commons-logging，避免与 spring-jcl 冲突
configurations.configureEach {
    exclude group: 'commons-logging', module: 'commons-logging'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// Enable JUnit 5
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
